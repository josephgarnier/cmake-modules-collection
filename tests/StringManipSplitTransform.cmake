# Copyright 2025-present, Joseph Garnier
# All rights reserved.
#
# This source code is licensed under the license found in the
# LICENSE file in the root directory of this source tree.
# =============================================================================
# What Is This?
# -------------
# See README file in the root directory of this source tree.

#-------------------------------------------------------------------------------
# Test of [StringManip module::SPLIT_TRANSFORM operation]:
#    ``string_manip(SPLIT_TRANSFORM <string_var> <ACTION> [OUTPUT_VARIABLE <output_var>])``
ct_add_test(NAME "test_string_manip_split_transform_operation")
function(${CMAKETEST_TEST})
	include(FuncStringManip)

	# Functionalities checking
	ct_add_section(NAME "start_case_action")
	function(${CMAKETEST_SECTION})
	
		ct_add_section(NAME "no_split_point_detected")
		function(${CMAKETEST_SECTION})
			set(input "mystringtosplit")
			string_manip(SPLIT_TRANSFORM input START_CASE)
			ct_assert_string(input)
			ct_assert_equal(input "Mystringtosplit")
			
			set(input "my1string2to3split")
			string_manip(SPLIT_TRANSFORM input START_CASE)
			ct_assert_string(input)
			ct_assert_equal(input "My1string2to3split")
		endfunction()
		
		ct_add_section(NAME "no_split_point_detected_output_version")
		function(${CMAKETEST_SECTION})
			set(input "mystringtosplit")
			unset(output)
			string_manip(SPLIT_TRANSFORM input START_CASE OUTPUT_VARIABLE output)
			ct_assert_equal(input "mystringtosplit")
			ct_assert_string(output)
			ct_assert_equal(output "Mystringtosplit")

			set(input "my1string2to3split")
			unset(output)
			string_manip(SPLIT_TRANSFORM input START_CASE OUTPUT_VARIABLE output)
			ct_assert_equal(input "my1string2to3split")
			ct_assert_string(output)
			ct_assert_equal(output "My1string2to3split")
		endfunction()
		
		ct_add_section(NAME "split_on_uppercase")
		function(${CMAKETEST_SECTION})
			set(input "myStringToSplit")
			string_manip(SPLIT_TRANSFORM input START_CASE)
			ct_assert_string(input)
			ct_assert_equal(input "MyStringToSplit")
		endfunction()
		
		ct_add_section(NAME "split_on_uppercase_output_version")
		function(${CMAKETEST_SECTION})
			set(input "myStringToSplit")
			unset(output)
			string_manip(SPLIT_TRANSFORM input START_CASE OUTPUT_VARIABLE output)
			ct_assert_equal(input "myStringToSplit")
			ct_assert_string(output)
			ct_assert_equal(output "MyStringToSplit")
		endfunction()
		
		ct_add_section(NAME "split_on_non_alphanumeric")
		function(${CMAKETEST_SECTION})
			set(input "my-string/to*split")
			string_manip(SPLIT_TRANSFORM input START_CASE)
			ct_assert_string(input)
			ct_assert_equal(input "MyStringToSplit")
		endfunction()

		ct_add_section(NAME "split_on_non_alphanumeric_output_version")
		function(${CMAKETEST_SECTION})
			set(input "my-string/to*split")
			unset(output)
			string_manip(SPLIT_TRANSFORM input START_CASE OUTPUT_VARIABLE output)
			ct_assert_equal(input "my-string/to*split")
			ct_assert_string(output)
			ct_assert_equal(output "MyStringToSplit")
		endfunction()

		ct_add_section(NAME "split_on_multiple_criteria")
		function(${CMAKETEST_SECTION})
			set(input "myString_to*Split")
			string_manip(SPLIT_TRANSFORM input START_CASE)
			ct_assert_string(input)
			ct_assert_equal(input "MyStringToSplit")
		endfunction()

		ct_add_section(NAME "split_on_multiple_criteria_output_version")
		function(${CMAKETEST_SECTION})
			set(input "myString_to*Split")
			unset(output)
			string_manip(SPLIT_TRANSFORM input START_CASE OUTPUT_VARIABLE output)
			ct_assert_equal(input "myString_to*Split")
			ct_assert_string(output)
			ct_assert_equal(output "MyStringToSplit")
		endfunction()
	endfunction()

	ct_add_section(NAME "c_identifier_upper_action")
	function(${CMAKETEST_SECTION})

		ct_add_section(NAME "no_split_point_detected")
		function(${CMAKETEST_SECTION})
			set(input "mystringtosplit")
			string_manip(SPLIT_TRANSFORM input C_IDENTIFIER_UPPER)
			ct_assert_string(input)
			ct_assert_equal(input "MYSTRINGTOSPLIT")

			set(input "my1string2to3split")
			string_manip(SPLIT_TRANSFORM input C_IDENTIFIER_UPPER)
			ct_assert_string(input)
			ct_assert_equal(input "MY1STRING2TO3SPLIT")
		endfunction()
		
		ct_add_section(NAME "no_split_point_detected_output_version")
		function(${CMAKETEST_SECTION})
			set(input "mystringtosplit")
			unset(output)
			string_manip(SPLIT_TRANSFORM input C_IDENTIFIER_UPPER OUTPUT_VARIABLE output)
			ct_assert_equal(input "mystringtosplit")
			ct_assert_string(output)
			ct_assert_equal(output "MYSTRINGTOSPLIT")
			
			set(input "my1string2to3split")
			unset(output)
			string_manip(SPLIT_TRANSFORM input C_IDENTIFIER_UPPER OUTPUT_VARIABLE output)
			ct_assert_equal(input "my1string2to3split")
			ct_assert_string(output)
			ct_assert_equal(output "MY1STRING2TO3SPLIT")
		endfunction()
		
		ct_add_section(NAME "split_on_uppercase")
		function(${CMAKETEST_SECTION})
			set(input "myStringToSplit")
			string_manip(SPLIT_TRANSFORM input C_IDENTIFIER_UPPER)
			ct_assert_string(input)
			ct_assert_equal(input "MY_STRING_TO_SPLIT")
		endfunction()
		
		ct_add_section(NAME "split_on_uppercase_output_version")
		function(${CMAKETEST_SECTION})
			set(input "myStringToSplit")
			unset(output)
			string_manip(SPLIT_TRANSFORM input C_IDENTIFIER_UPPER OUTPUT_VARIABLE output)
			ct_assert_equal(input "myStringToSplit")
			ct_assert_string(output)
			ct_assert_equal(output "MY_STRING_TO_SPLIT")
		endfunction()
		
		ct_add_section(NAME "split_on_non_alphanumeric")
		function(${CMAKETEST_SECTION})
			set(input "my-string/to*split")
			string_manip(SPLIT_TRANSFORM input C_IDENTIFIER_UPPER)
			ct_assert_string(input)
			ct_assert_equal(input "MY_STRING_TO_SPLIT")
		endfunction()
		
		ct_add_section(NAME "split_on_non_alphanumeric_output_version")
		function(${CMAKETEST_SECTION})
			set(input "my-string/to*split")
			unset(output)
			string_manip(SPLIT_TRANSFORM input C_IDENTIFIER_UPPER OUTPUT_VARIABLE output)
			ct_assert_equal(input "my-string/to*split")
			ct_assert_string(output)
			ct_assert_equal(output "MY_STRING_TO_SPLIT")
		endfunction()

		ct_add_section(NAME "split_on_multiple_criteria")
		function(${CMAKETEST_SECTION})
			set(input "myString_to*Split")
			string_manip(SPLIT_TRANSFORM input C_IDENTIFIER_UPPER)
			ct_assert_string(input)
			ct_assert_equal(input "MY_STRING_TO_SPLIT")
		endfunction()
		
		ct_add_section(NAME "split_on_multiple_criteria_output_version")
		function(${CMAKETEST_SECTION})
			set(input "myString_to*Split")
			unset(output)
			string_manip(SPLIT_TRANSFORM input C_IDENTIFIER_UPPER OUTPUT_VARIABLE output)
			ct_assert_equal(input "myString_to*Split")
			ct_assert_string(output)
			ct_assert_equal(output "MY_STRING_TO_SPLIT")
		endfunction()
	endfunction()

	# Errors checking
	ct_add_section(NAME "throws_if_arg_string_var_is_missing_1" EXPECTFAIL)
	function(${CMAKETEST_SECTION})
		string_manip(SPLIT_TRANSFORM START_CASE)
	endfunction()

	ct_add_section(NAME "throws_if_arg_string_var_is_missing_2" EXPECTFAIL)
	function(${CMAKETEST_SECTION})
		string_manip(SPLIT_TRANSFORM "" START_CASE)
	endfunction()

	ct_add_section(NAME "throws_if_arg_string_var_is_missing_3" EXPECTFAIL)
	function(${CMAKETEST_SECTION})
		string_manip(SPLIT_TRANSFORM "input" START_CASE)
	endfunction()

	ct_add_section(NAME "throws_if_arg_string_var_is_missing_4" EXPECTFAIL)
	function(${CMAKETEST_SECTION})
		unset(input)
		string_manip(SPLIT_TRANSFORM input START_CASE)
	endfunction()

	ct_add_section(NAME "throws_if_arg_action_is_missing" EXPECTFAIL)
	function(${CMAKETEST_SECTION})
		set(input "mystring")
		string_manip(SPLIT_TRANSFORM input)
	endfunction()

	ct_add_section(NAME "throws_if_arg_output_var_is_missing_1" EXPECTFAIL)
	function(${CMAKETEST_SECTION})
		set(input "mystring")
		string_manip(SPLIT_TRANSFORM input START_CASE OUTPUT_VARIABLE)
	endfunction()

	ct_add_section(NAME "throws_if_arg_output_var_is_missing_2" EXPECTFAIL)
	function(${CMAKETEST_SECTION})
		set(input "mystring")
		string_manip(SPLIT_TRANSFORM input START_CASE OUTPUT_VARIABLE "")
	endfunction()

	ct_add_section(NAME "throws_if_arg_output_var_is_missing_3" EXPECTFAIL)
	function(${CMAKETEST_SECTION})
		set(input "mystring")
		string_manip(SPLIT_TRANSFORM input START_CASE OUTPUT_VARIABLE "output")
	endfunction()

	ct_add_section(NAME "throws_if_arg_output_var_is_missing_4" EXPECTFAIL)
	function(${CMAKETEST_SECTION})
		set(input "mystring")
		unset(output)
		string_manip(SPLIT_TRANSFORM input START_CASE OUTPUT_VARIABLE output)
	endfunction()
endfunction()
